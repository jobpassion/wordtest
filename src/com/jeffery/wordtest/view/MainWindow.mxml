<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 clipAndEnableScrolling="true"
		 keyDown="group1_keyDownHandler(event)"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="group1_creationCompleteHandler(event)">
	
	<fx:Style source="style/style.css"/>

	<s:BitmapImage  source="assets/background.jpg" width="100%" height="100%" />
	<s:VGroup horizontalAlign="center" width="100%" id="wordComp" y="-50">
		
		<fx:Script>
			<![CDATA[
				import mx.core.FlexGlobals;
				import mx.core.SoundAsset;
				
				import spark.components.Application;
				
				private var timer:Timer = new Timer(10);
				private var minuteTimer:Timer = new Timer(60000);
				private var wordArray:Dictionary = new Dictionary();
				private var currentWordIdx = 0;
				private var currentArray:Array;
				private var currentWord;
				private var corr = 0;
				private var unCorr = 0;
				var succSound:Sound = new Sound(new URLRequest("app:/assets/correctSound.mp3"));
				var failSound:Sound = new Sound(new URLRequest("app:/assets/unCorrectSound.mp3"));
				var c:SoundChannel;
				private var unCorrArr = [];
				private var speed = 1;
				protected function group1_creationCompleteHandler(event:FlexEvent):void
				{
					// TODO Auto-generated method stub
					var self:MainWindow = this;
					timer.addEventListener(TimerEvent.TIMER, function(e:TimerEvent){
						wordComp.y += speed;
						if(wordComp.y >= self.height){
//							next();
							failure();
						}
					});
					minuteTimer.addEventListener(TimerEvent.TIMER, function(e:TimerEvent){
						complete();
					});
					setup();
					FlexGlobals.topLevelApplication.addEventListener(KeyboardEvent.KEY_UP,esc);
				}
				private function setup(){
					var self = this;
					wordArray = new Dictionary();
					var config:File = new File("app:/config/config.txt");
					var fs:FileStream = new FileStream();
					fs.open(config, FileMode.READ);
					var conStr:String = fs.readUTFBytes(fs.bytesAvailable);
					for each(var cons:String in conStr.split("\n")){
						if(cons.indexOf('speed=') != -1){
							speed = 1*Number(cons.substring(6));
						}
					}

					var lessons = new File('app:/lessons');
					if(lessons.isDirectory){
						lessons = lessons.getDirectoryListing();
						for each(var file:File in lessons){
							var fs:FileStream = new FileStream();
							fs.open(file, FileMode.READ);
							var lines:String = fs.readUTFBytes(fs.bytesAvailable);
							var arr:Array = []
							for each(var l:String in lines.split("\n")){
								if(l.length > 0){
									arr.push(l);
								}
							}
							if(arr.length > 0)
								wordArray[file.name] = arr;
						}
					}

					selector = new Selector();
					selector.wordArray = wordArray;
					this.addElement(selector);
					selector.addEventListener("select", function(e:DataEvent){
						currentArray = wordArray[e.data];
						start();
						self.removeElement(selector);
						selector = null;
					});
				}
				var selector:Selector;
				private function start(){
					timer.start();
					minuteTimer.start();
					next();
					currentWordIdx = 0;
					corr = 0;
					unCorr = 0;
					unCorrArr = [];
					FlexGlobals.topLevelApplication.addEventListener(KeyboardEvent.KEY_UP,group1_keyDownHandler);
					wordComp.visible = true;
				}
				private function next(){

					if(currentArray.length == 0){
						timer.stop();
						complete();
						return;
					}
					var ran = Math.random()*(currentArray.length - 1);
					ran = Math.round(ran);
					word.text = currentArray.splice(ran, 1)[0];
					currentWord = word.text;
					currentWordIdx++;
					wordComp.y = 0;
				}
				
				protected function group1_keyDownHandler(event:KeyboardEvent):void
				{
					if(event.keyCode == 13){
						//true, enter
						corr++;
						next();
						if(c!=null)
						c.stop();
						c = succSound.play();
						
					}else if(event.keyCode == 32){
						//false, space
//						unCorrArr.push(currentWord);
//						unCorr++;
//						next();
//						if(c!=null)
//							c.stop();
//						c = failSound.play();
                        failure();
					}
				}
                private function failure(){
                    unCorrArr.push(currentWord);
                    unCorr++;
                    next();
                    if(c!=null)
                        c.stop();
                    c = failSound.play();
                }

				private function esc(event:KeyboardEvent){
					if(event.keyCode != 27){
						return;
					}
					if(selector)
						return;
					FlexGlobals.topLevelApplication.removeEventListener(KeyboardEvent.KEY_UP,group1_keyDownHandler);
					wordComp.visible = false;
					if(c!=null){
						c.stop();
						c = null;
					}
					minuteTimer.reset();
					timer.reset();
					setup();
					if(result){
						this.removeElement(result);
						result = null;
					}
				}
				var result:Result;
				private function complete(){
					FlexGlobals.topLevelApplication.removeEventListener(KeyboardEvent.KEY_UP,group1_keyDownHandler);
					wordComp.visible = false;
					result = new Result();
					result.corr = this.corr;
					result.unCorr = this.unCorr;
					result.unCorrArr = unCorrArr;
					minuteTimer.reset();
					timer.reset();
					if(c!=null){
						c.stop();
						c = null;
					}
					this.addElement(result);
				}
			]]>
		</fx:Script>
		
		<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
		]]>
	</fx:Script>
		<s:Label text="TestWord" styleName="Word" id="word"/>
	</s:VGroup>
</s:Group>
